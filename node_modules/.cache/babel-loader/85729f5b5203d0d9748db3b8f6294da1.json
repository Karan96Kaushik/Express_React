{"ast":null,"code":"var _jsxFileName = \"/home/karan/Documents/GitWorkSpace/draftjs_test/react-draft-js-demo/src/draft.js\";\nimport React, { Component } from 'react';\nimport 'draft-js/dist/Draft.css';\nimport debounce from 'lodash/debounce';\nimport { Editor, EditorState, RichUtils, convertFromRaw, convertToRaw, getDefaultKeyBinding, KeyBindingUtil } from 'draft-js';\nconst {\n  hasCommandModifier\n} = KeyBindingUtil;\n\nfunction myKeyBindingFn(e) {\n  if (e.keyCode === 83\n  /* `S` key */\n  && hasCommandModifier(e)) {\n    return 'myeditor-save';\n  }\n\n  return getDefaultKeyBinding(e);\n}\n\nconst MAX_LENGTH = 10;\n\nclass RichEditorExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = editorState => {\n      const contentState = editorState.getCurrentContent();\n      console.log('content state', convertToRaw(contentState));\n      this.saveContent(contentState);\n      this.setState({\n        editorState\n      });\n    };\n\n    this.saveContent = debounce(content => {\n      window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\n    }, 1000);\n\n    this._getLengthOfSelectedText = () => {\n      console.log('say');\n      const currentSelection = this.state.editorState.getSelection();\n      const isCollapsed = currentSelection.isCollapsed();\n      let length = 0;\n\n      if (!isCollapsed) {\n        const currentContent = this.state.editorState.getCurrentContent();\n        const startKey = currentSelection.getStartKey();\n        const endKey = currentSelection.getEndKey();\n        const isBackward = currentSelection.getIsBackward();\n        const blockMap = currentContent.getBlockMap();\n        const startBlock = currentContent.getBlockForKey(startKey);\n        const endBlock = currentContent.getBlockForKey(endKey);\n        const isStartAndEndBlockAreTheSame = startKey === endKey;\n        const startBlockTextLength = startBlock.getLength();\n        const endBlockTextLength = endBlock.getLength();\n        const startSelectedTextLength = startBlockTextLength - currentSelection.getStartOffset();\n        const endSelectedTextLength = currentSelection.getEndOffset();\n        const keyAfterEnd = currentContent.getKeyAfter(endKey);\n\n        if (isStartAndEndBlockAreTheSame) {\n          length += currentSelection.getEndOffset() - currentSelection.getStartOffset();\n        } else {\n          let currentKey = startKey;\n          let counter = 0;\n\n          while (currentKey && currentKey !== keyAfterEnd) {\n            if (currentKey === startKey) {\n              length += startSelectedTextLength + 1;\n            } else if (currentKey === endKey) {\n              length += endSelectedTextLength;\n            } else {\n              length += currentContent.getBlockForKey(currentKey).getLength() + 1;\n            }\n\n            currentKey = currentContent.getKeyAfter(currentKey);\n          }\n\n          ;\n        }\n      }\n\n      return length;\n    };\n\n    this._handleBeforeInput = () => {\n      console.log('hello');\n      const currentContent = this.state.editorState.getCurrentContent();\n      const currentContentLength = currentContent.getPlainText('').length;\n\n      if (currentContentLength > MAX_LENGTH - 1) {\n        console.log('you can type max ten characters');\n        return 'handled';\n      }\n    };\n\n    this._handlePastedText = pastedText => {\n      const currentContent = this.state.editorState.getCurrentContent();\n      const currentContentLength = currentContent.getPlainText('').length;\n\n      const selectedTextLength = this._getLengthOfSelectedText();\n\n      if (currentContentLength + pastedText.length - selectedTextLength > MAX_LENGTH) {\n        console.log('you can type max ten characters');\n        return 'handled';\n      }\n    };\n\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n    this.onChange = this.onChange.bind(this);\n    this._getLengthOfSelectedText = this._getLengthOfSelectedText.bind(this);\n    this._handleBeforeInput = this._handleBeforeInput.bind(this);\n\n    this.focus = () => this.refs.editor.focus(); //this.handleKeyCommand = (command) => this._handleKeyCommand(command);\n\n\n    this.handleKeyCommand = this.handleKeyCommand.bind(this);\n\n    this.onTab = e => this._onTab(e);\n\n    this.toggleBlockType = type => this._toggleBlockType(type);\n\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  handleKeyCommand(command) {\n    if (command === 'myeditor-save') {\n      // Perform a request to save your contents, set\n      // a new `editorState`, etc.\n      var raw_content = convertToRaw(this.state.editorState.getCurrentContent()); //var raw_state = convertToRaw(this.state.editorState);\n\n      var _state = convertFromRaw(raw_content);\n\n      window.localStorage.setItem('content', JSON.stringify(raw_content));\n      this.state = {\n        editorState: EditorState.createEmpty()\n      };\n      console.log('saved', raw_content);\n      return 'handled';\n    }\n\n    return 'not-handled';\n  }\n\n  _handleKeyCommand(command) {\n    const {\n      editorState\n    } = this.state;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    if (!this.state.editorState) {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 5\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RichEditor-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleBlockType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleInlineStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      onClick: this.focus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      blockStyleFn: getBlockStyle,\n      customStyleMap: styleMap,\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand,\n      onChange: this.onChange,\n      onTab: this.onTab,\n      placeholder: \"Tell a story...\",\n      ref: \"editor\",\n      spellCheck: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 12,\n    padding: 1\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton ui button';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 4\n      }\n    }, this.props.label);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const {\n    editorState\n  } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 3\n    }\n  }, BLOCK_TYPES.map(type => /*#__PURE__*/React.createElement(StyleButton, {\n    key: type.label,\n    active: type.style === blockType,\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 5\n    }\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 3\n    }\n  }, INLINE_STYLES.map(type => /*#__PURE__*/React.createElement(StyleButton, {\n    key: type.label,\n    active: currentStyle.has(type.style),\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default RichEditorExample;","map":{"version":3,"sources":["/home/karan/Documents/GitWorkSpace/draftjs_test/react-draft-js-demo/src/draft.js"],"names":["React","Component","debounce","Editor","EditorState","RichUtils","convertFromRaw","convertToRaw","getDefaultKeyBinding","KeyBindingUtil","hasCommandModifier","myKeyBindingFn","e","keyCode","MAX_LENGTH","RichEditorExample","constructor","props","onChange","editorState","contentState","getCurrentContent","console","log","saveContent","setState","content","window","localStorage","setItem","JSON","stringify","_getLengthOfSelectedText","currentSelection","state","getSelection","isCollapsed","length","currentContent","startKey","getStartKey","endKey","getEndKey","isBackward","getIsBackward","blockMap","getBlockMap","startBlock","getBlockForKey","endBlock","isStartAndEndBlockAreTheSame","startBlockTextLength","getLength","endBlockTextLength","startSelectedTextLength","getStartOffset","endSelectedTextLength","getEndOffset","keyAfterEnd","getKeyAfter","currentKey","counter","_handleBeforeInput","currentContentLength","getPlainText","_handlePastedText","pastedText","selectedTextLength","createEmpty","bind","focus","refs","editor","handleKeyCommand","onTab","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","command","raw_content","_state","_handleKeyCommand","newState","maxDepth","blockType","inlineStyle","render","className","hasText","first","getType","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport 'draft-js/dist/Draft.css';\r\nimport debounce from 'lodash/debounce';\r\nimport {\r\n\tEditor,\r\n\tEditorState,\r\n\tRichUtils,\r\n\tconvertFromRaw,\r\n\tconvertToRaw,\r\n\tgetDefaultKeyBinding,\r\n\tKeyBindingUtil \r\n} from 'draft-js';\r\n\r\nconst {hasCommandModifier} = KeyBindingUtil;\r\n\r\nfunction myKeyBindingFn(e: SyntheticKeyboardEvent): string {\r\n  if (e.keyCode === 83 /* `S` key */ && hasCommandModifier(e)) {\r\n    return 'myeditor-save';\r\n  }\r\n  return getDefaultKeyBinding(e);\r\n}\r\n\r\nconst MAX_LENGTH = 10;\r\n\r\nclass RichEditorExample extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\teditorState: EditorState.createEmpty()\r\n\t\t};\r\n\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t\tthis._getLengthOfSelectedText = this._getLengthOfSelectedText.bind(this);\r\n\t\tthis._handleBeforeInput = this._handleBeforeInput.bind(this);\r\n\r\n\t\tthis.focus = () => this.refs.editor.focus();\r\n\r\n\t\t//this.handleKeyCommand = (command) => this._handleKeyCommand(command);\r\n\t\tthis.handleKeyCommand = this.handleKeyCommand.bind(this);\r\n\t\tthis.onTab = (e) => this._onTab(e);\r\n\t\tthis.toggleBlockType = (type) => this._toggleBlockType(type);\r\n\t\tthis.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\r\n\t}\r\n\r\n    handleKeyCommand(command: string): DraftHandleValue {\r\n        if (command === 'myeditor-save') {\r\n            // Perform a request to save your contents, set\r\n            // a new `editorState`, etc.\r\n            var raw_content = convertToRaw(this.state.editorState.getCurrentContent());\r\n            //var raw_state = convertToRaw(this.state.editorState);\r\n            var _state = convertFromRaw(raw_content)\r\n            window.localStorage.setItem('content', JSON.stringify(raw_content));\r\n            this.state = {\r\n                editorState: EditorState.createEmpty(),\r\n            };\r\n            \r\n            console.log('saved', raw_content)\r\n            return 'handled';\r\n        }\r\n        return 'not-handled';\r\n\t}\r\n\t\r\n\tonChange = (editorState) => {\r\n\t\tconst contentState = editorState.getCurrentContent();\r\n\t\tconsole.log('content state', convertToRaw(contentState));\r\n\t\tthis.saveContent(contentState);\r\n\t\tthis.setState({ editorState });\r\n\t}\r\n\r\n\r\n\r\n\tsaveContent = debounce((content) => {\r\n\t\twindow.localStorage.setItem('content', JSON.stringify((convertToRaw(content))));\r\n\t}, 1000);\r\n\r\n\t// saveContent = (content) => {\r\n\t//   window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\r\n\t// }\r\n\r\n\r\n\t_getLengthOfSelectedText = () => {\r\n\t\tconsole.log('say');\r\n\t\tconst currentSelection = this.state.editorState.getSelection();\r\n\t\tconst isCollapsed = currentSelection.isCollapsed();\r\n\r\n\t\tlet length = 0;\r\n\r\n\t\tif (!isCollapsed) {\r\n\t\t\tconst currentContent = this.state.editorState.getCurrentContent();\r\n\t\t\tconst startKey = currentSelection.getStartKey();\r\n\t\t\tconst endKey = currentSelection.getEndKey();\r\n\t\t\tconst isBackward = currentSelection.getIsBackward();\r\n\t\t\tconst blockMap = currentContent.getBlockMap();\r\n\t\t\tconst startBlock = currentContent.getBlockForKey(startKey);\r\n\t\t\tconst endBlock = currentContent.getBlockForKey(endKey);\r\n\t\t\tconst isStartAndEndBlockAreTheSame = startKey === endKey;\r\n\t\t\tconst startBlockTextLength = startBlock.getLength();\r\n\t\t\tconst endBlockTextLength = endBlock.getLength();\r\n\t\t\tconst startSelectedTextLength = startBlockTextLength - currentSelection.getStartOffset();\r\n\t\t\tconst endSelectedTextLength = currentSelection.getEndOffset();\r\n\t\t\tconst keyAfterEnd = currentContent.getKeyAfter(endKey);\r\n\r\n\t\t\tif (isStartAndEndBlockAreTheSame) {\r\n\t\t\t\tlength += currentSelection.getEndOffset() - currentSelection.getStartOffset();\r\n\t\t\t} else {\r\n\t\t\t\tlet currentKey = startKey;\r\n\t\t\t\tlet counter = 0;\r\n\r\n\t\t\t\twhile (currentKey && currentKey !== keyAfterEnd) {\r\n\t\t\t\t\tif (currentKey === startKey) {\r\n\t\t\t\t\t\tlength += startSelectedTextLength + 1;\r\n\t\t\t\t\t} else if (currentKey === endKey) {\r\n\t\t\t\t\t\tlength += endSelectedTextLength;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlength += currentContent.getBlockForKey(currentKey).getLength() + 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentKey = currentContent.getKeyAfter(currentKey);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn length;\r\n\t}\r\n\r\n\t_handleBeforeInput = () => {\r\n\t\tconsole.log('hello');\r\n\t\tconst currentContent = this.state.editorState.getCurrentContent();\r\n\t\tconst currentContentLength = currentContent.getPlainText('').length\r\n\r\n\t\tif (currentContentLength > MAX_LENGTH - 1) {\r\n\t\t\tconsole.log('you can type max ten characters');\r\n\r\n\t\t\treturn 'handled';\r\n\t\t}\r\n\t}\r\n\r\n\t_handlePastedText = (pastedText) => {\r\n\t\tconst currentContent = this.state.editorState.getCurrentContent();\r\n\t\tconst currentContentLength = currentContent.getPlainText('').length;\r\n\t\tconst selectedTextLength = this._getLengthOfSelectedText();\r\n\r\n\t\tif (currentContentLength + pastedText.length - selectedTextLength > MAX_LENGTH) {\r\n\t\t\tconsole.log('you can type max ten characters');\r\n\r\n\t\t\treturn 'handled';\r\n\t\t}\r\n\t}\r\n\r\n\t_handleKeyCommand(command) {\r\n\t\tconst { editorState } = this.state;\r\n\t\tconst newState = RichUtils.handleKeyCommand(editorState, command);\r\n\t\tif (newState) {\r\n\t\t\tthis.onChange(newState);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_onTab(e) {\r\n\t\tconst maxDepth = 4;\r\n\t\tthis.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\r\n\t}\r\n\r\n\t_toggleBlockType(blockType) {\r\n\t\tthis.onChange(\r\n\t\t\tRichUtils.toggleBlockType(\r\n\t\t\t\tthis.state.editorState,\r\n\t\t\t\tblockType\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t_toggleInlineStyle(inlineStyle) {\r\n\t\tthis.onChange(\r\n\t\t\tRichUtils.toggleInlineStyle(\r\n\t\t\t\tthis.state.editorState,\r\n\t\t\t\tinlineStyle\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { editorState } = this.state;\r\n\r\n\t\t// If the user changes block type before entering any text, we can\r\n\t\t// either style the placeholder or hide it. Let's just hide it now.\r\n\t\tlet className = 'RichEditor-editor';\r\n\t\tvar contentState = editorState.getCurrentContent();\r\n\t\tif (!contentState.hasText()) {\r\n\t\t\tif (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n\t\t\t\tclassName += ' RichEditor-hidePlaceholder';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.state.editorState) {\r\n\t\t\treturn (\r\n\t\t\t\t<h3 className=\"loading\">Loading...</h3>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"RichEditor-root\">\r\n\t\t\t\t\t<BlockStyleControls\r\n\t\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\t\tonToggle={this.toggleBlockType}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<InlineStyleControls\r\n\t\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\t\tonToggle={this.toggleInlineStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className={className} onClick={this.focus}>\r\n\t\t\t\t\t\t<Editor\r\n\t\t\t\t\t\t\tblockStyleFn={getBlockStyle}\r\n\t\t\t\t\t\t\tcustomStyleMap={styleMap}\r\n\t\t\t\t\t\t\teditorState={editorState}\r\n\t\t\t\t\t\t\thandleKeyCommand={this.handleKeyCommand}\r\n\t\t\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\t\t\tonTab={this.onTab}\r\n\t\t\t\t\t\t\tplaceholder=\"Tell a story...\"\r\n\t\t\t\t\t\t\tref=\"editor\"\r\n\t\t\t\t\t\t\tspellCheck={true}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t}\r\n}\r\n\r\n\r\n\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n\tCODE: {\r\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n\t\tfontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n\t\tfontSize: 12,\r\n\t\tpadding: 1,\r\n\t},\r\n};\r\n\r\nfunction getBlockStyle(block) {\r\n\tswitch (block.getType()) {\r\n\t\tcase 'blockquote': return 'RichEditor-blockquote';\r\n\t\tdefault: return null;\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass StyleButton extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.onToggle = (e) => {\r\n\t\t\te.preventDefault();\r\n\t\t\tthis.props.onToggle(this.props.style);\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet className = 'RichEditor-styleButton ui button';\r\n\t\tif (this.props.active) {\r\n\t\t\tclassName += ' RichEditor-activeButton';\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<span className={className} onMouseDown={this.onToggle}>\r\n\t\t\t\t{this.props.label}\r\n\t\t\t</span>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\n\r\nconst BLOCK_TYPES = [\r\n\t{ label: 'H1', style: 'header-one' },\r\n\t{ label: 'H2', style: 'header-two' },\r\n\t{ label: 'H3', style: 'header-three' },\r\n\t{ label: 'H4', style: 'header-four' },\r\n\t{ label: 'H5', style: 'header-five' },\r\n\t{ label: 'H6', style: 'header-six' },\r\n\t{ label: 'Blockquote', style: 'blockquote' },\r\n\t{ label: 'UL', style: 'unordered-list-item' },\r\n\t{ label: 'OL', style: 'ordered-list-item' },\r\n\t{ label: 'Code Block', style: 'code-block' },\r\n];\r\n\r\n\r\n\r\nconst BlockStyleControls = (props) => {\r\n\tconst { editorState } = props;\r\n\tconst selection = editorState.getSelection();\r\n\tconst blockType = editorState\r\n\t\t.getCurrentContent()\r\n\t\t.getBlockForKey(selection.getStartKey())\r\n\t\t.getType();\r\n\r\n\treturn (\r\n\t\t<div className=\"RichEditor-controls\">\r\n\t\t\t{BLOCK_TYPES.map((type) =>\r\n\t\t\t\t<StyleButton\r\n\t\t\t\t\tkey={type.label}\r\n\t\t\t\t\tactive={type.style === blockType}\r\n\t\t\t\t\tlabel={type.label}\r\n\t\t\t\t\tonToggle={props.onToggle}\r\n\t\t\t\t\tstyle={type.style}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nvar INLINE_STYLES = [\r\n\t{ label: 'Bold', style: 'BOLD' },\r\n\t{ label: 'Italic', style: 'ITALIC' },\r\n\t{ label: 'Underline', style: 'UNDERLINE' },\r\n\t{ label: 'Monospace', style: 'CODE' },\r\n];\r\n\r\n\r\n\r\nconst InlineStyleControls = (props) => {\r\n\tvar currentStyle = props.editorState.getCurrentInlineStyle();\r\n\treturn (\r\n\t\t<div className=\"RichEditor-controls\">\r\n\t\t\t{INLINE_STYLES.map(type =>\r\n\t\t\t\t<StyleButton\r\n\t\t\t\t\tkey={type.label}\r\n\t\t\t\t\tactive={currentStyle.has(type.style)}\r\n\t\t\t\t\tlabel={type.label}\r\n\t\t\t\t\tonToggle={props.onToggle}\r\n\t\t\t\t\tstyle={type.style}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n\r\nexport default RichEditorExample;"]},"metadata":{},"sourceType":"module"}