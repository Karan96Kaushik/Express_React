{"ast":null,"code":"\"use strict\";\n\nconst en_font = require(\"./alpha/EN\");\n\nconst range = require(\"./helper/Range\");\n\nconst bv = require(\"bvalid\");\n\nconst Constant = require(\"./helper/Constants\");\n\nconst Validation = require(\"./helper/Validation\");\n\nconst Style = require(\"./util/Style\");\n\nfunction throwError(_type) {\n  var errorMsg = Constant.errors[_type] || Constant.errors[\"undefinedError\"];\n  throw new Error(errorMsg);\n}\n\nfunction showWarning(_type) {\n  try {\n    return process.emitWarning(Constant.warning[_type]);\n  } catch (err) {\n    return;\n  }\n}\n\nmodule.exports = function (value, option) {\n  if (bv.isString(value) == false) {\n    return throwError();\n  }\n\n  var option = Validation.ValidOption(option);\n\n  if (option == false) {\n    return throwError(\"invalidOption\");\n  }\n\n  if (option.style) {\n    if (option.style == \"upr\") {\n      value = value.toUpperCase();\n    } else if (option.style == \"lwr\") {\n      value = value.toLowerCase();\n    } else if (option.style == \"cap\") {\n      value = value.charAt(0).toUpperCase() + value.slice(1);\n    }\n  }\n\n  value = Validation.removeEscapes(value);\n  var op = \"\";\n\n  for (var i = 0; i < value.length; i++) {\n    var _r = range.getRangePos(value[i]);\n\n    op += Style.createFont(value[i], _r, option.font);\n  }\n\n  if (option.style) {\n    op = Style.applyStyle(op, option.style);\n  }\n\n  return op;\n};","map":{"version":3,"sources":["/home/karansgs/Documents/githubWorkSpace/Express_React/node_modules/unifont/lib/UniFont.js"],"names":["en_font","require","range","bv","Constant","Validation","Style","throwError","_type","errorMsg","errors","Error","showWarning","process","emitWarning","warning","err","module","exports","value","option","isString","ValidOption","style","toUpperCase","toLowerCase","charAt","slice","removeEscapes","op","i","length","_r","getRangePos","createFont","font","applyStyle"],"mappings":"AAAA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,cAAD,CAArB;;AAGA,SAASM,UAAT,CAAoBC,KAApB,EAA0B;AACxB,MAAIC,QAAQ,GAAGL,QAAQ,CAACM,MAAT,CAAgBF,KAAhB,KAA0BJ,QAAQ,CAACM,MAAT,CAAgB,gBAAhB,CAAzC;AACA,QAAM,IAAIC,KAAJ,CAAUF,QAAV,CAAN;AACD;;AAED,SAASG,WAAT,CAAqBJ,KAArB,EAA2B;AACzB,MAAG;AACD,WAAOK,OAAO,CAACC,WAAR,CAAoBV,QAAQ,CAACW,OAAT,CAAiBP,KAAjB,CAApB,CAAP;AACD,GAFD,CAEC,OAAMQ,GAAN,EAAU;AACT;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAeC,MAAf,EAAsB;AACnC,MAAGjB,EAAE,CAACkB,QAAH,CAAYF,KAAZ,KAAsB,KAAzB,EAAgC;AAC9B,WAAOZ,UAAU,EAAjB;AACD;;AACD,MAAIa,MAAM,GAAGf,UAAU,CAACiB,WAAX,CAAuBF,MAAvB,CAAb;;AACA,MAAGA,MAAM,IAAI,KAAb,EACA;AACE,WAAOb,UAAU,CAAC,eAAD,CAAjB;AACD;;AACD,MAAGa,MAAM,CAACG,KAAV,EAAgB;AACd,QAAGH,MAAM,CAACG,KAAP,IAAgB,KAAnB,EACA;AACEJ,MAAAA,KAAK,GAAGA,KAAK,CAACK,WAAN,EAAR;AACD,KAHD,MAGO,IAAGJ,MAAM,CAACG,KAAP,IAAgB,KAAnB,EACP;AACEJ,MAAAA,KAAK,GAAGA,KAAK,CAACM,WAAN,EAAR;AACD,KAHM,MAGA,IAAGL,MAAM,CAACG,KAAP,IAAgB,KAAnB,EACP;AACEJ,MAAAA,KAAK,GAAGA,KAAK,CAACO,MAAN,CAAa,CAAb,EAAgBF,WAAhB,KAAgCL,KAAK,CAACQ,KAAN,CAAY,CAAZ,CAAxC;AACD;AACF;;AACDR,EAAAA,KAAK,GAAGd,UAAU,CAACuB,aAAX,CAAyBT,KAAzB,CAAR;AACA,MAAIU,EAAE,GAAG,EAAT;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAgBA,CAAC,GAAGX,KAAK,CAACY,MAA1B,EAAmCD,CAAC,EAApC,EACA;AACE,QAAIE,EAAE,GAAG9B,KAAK,CAAC+B,WAAN,CAAkBd,KAAK,CAACW,CAAD,CAAvB,CAAT;;AACAD,IAAAA,EAAE,IAAIvB,KAAK,CAAC4B,UAAN,CAAiBf,KAAK,CAACW,CAAD,CAAtB,EAA0BE,EAA1B,EAA6BZ,MAAM,CAACe,IAApC,CAAN;AACD;;AAED,MAAGf,MAAM,CAACG,KAAV,EACA;AACEM,IAAAA,EAAE,GAAGvB,KAAK,CAAC8B,UAAN,CAAiBP,EAAjB,EAAoBT,MAAM,CAACG,KAA3B,CAAL;AACD;;AAED,SAAOM,EAAP;AACH,CAnCD","sourcesContent":["\"use strict\";\nconst en_font = require(\"./alpha/EN\");\nconst range = require(\"./helper/Range\");\nconst bv = require(\"bvalid\");\nconst Constant = require(\"./helper/Constants\");\nconst Validation = require(\"./helper/Validation\");\nconst Style = require(\"./util/Style\");\n\n\nfunction throwError(_type){\n  var errorMsg = Constant.errors[_type] || Constant.errors[\"undefinedError\"]\n  throw new Error(errorMsg);\n}\n\nfunction showWarning(_type){\n  try{\n    return process.emitWarning(Constant.warning[_type]);\n  }catch(err){\n    return;\n  }\n}\n\nmodule.exports = function(value,option){\n    if(bv.isString(value) == false) {\n      return throwError();\n    }\n    var option = Validation.ValidOption(option);\n    if(option == false)\n    {\n      return throwError(\"invalidOption\");\n    }\n    if(option.style){\n      if(option.style == \"upr\")\n      {\n        value = value.toUpperCase();\n      } else if(option.style == \"lwr\")\n      {\n        value = value.toLowerCase();\n      } else if(option.style == \"cap\")\n      {\n        value = value.charAt(0).toUpperCase() + value.slice(1);\n      }\n    }\n    value = Validation.removeEscapes(value);\n    var op = \"\";\n    for(var i = 0 ; i < value.length ; i++)\n    {\n      var _r = range.getRangePos(value[i]);\n      op += Style.createFont(value[i],_r,option.font);\n    }\n\n    if(option.style)\n    {\n      op = Style.applyStyle(op,option.style);\n    }\n\n    return op;\n}\n\n\n\n"]},"metadata":{},"sourceType":"script"}