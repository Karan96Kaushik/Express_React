{"ast":null,"code":"var _jsxFileName = \"/home/karan/Documents/GitWorkSpace/draftjs_test/react-draft-js-demo/src/draft.js\";\nimport React, { Component } from 'react';\nimport 'draft-js/dist/Draft.css';\nimport debounce from 'lodash/debounce';\nimport { Editor, EditorState, RichUtils, convertFromRaw, convertToRaw } from 'draft-js';\nconst MAX_LENGTH = 10;\n\nclass RichEditorExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = editorState => {\n      const contentState = editorState.getCurrentContent();\n      console.log('content state', convertToRaw(contentState));\n      this.saveContent(contentState);\n      this.setState({\n        editorState\n      });\n    };\n\n    this.saveContent = debounce(content => {\n      window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\n    }, 1000);\n\n    this._getLengthOfSelectedText = () => {\n      console.log('say');\n      const currentSelection = this.state.editorState.getSelection();\n      const isCollapsed = currentSelection.isCollapsed();\n      let length = 0;\n\n      if (!isCollapsed) {\n        const currentContent = this.state.editorState.getCurrentContent();\n        const startKey = currentSelection.getStartKey();\n        const endKey = currentSelection.getEndKey();\n        const isBackward = currentSelection.getIsBackward();\n        const blockMap = currentContent.getBlockMap();\n        const startBlock = currentContent.getBlockForKey(startKey);\n        const endBlock = currentContent.getBlockForKey(endKey);\n        const isStartAndEndBlockAreTheSame = startKey === endKey;\n        const startBlockTextLength = startBlock.getLength();\n        const endBlockTextLength = endBlock.getLength();\n        const startSelectedTextLength = startBlockTextLength - currentSelection.getStartOffset();\n        const endSelectedTextLength = currentSelection.getEndOffset();\n        const keyAfterEnd = currentContent.getKeyAfter(endKey);\n\n        if (isStartAndEndBlockAreTheSame) {\n          length += currentSelection.getEndOffset() - currentSelection.getStartOffset();\n        } else {\n          let currentKey = startKey;\n          let counter = 0;\n\n          while (currentKey && currentKey !== keyAfterEnd) {\n            if (currentKey === startKey) {\n              length += startSelectedTextLength + 1;\n            } else if (currentKey === endKey) {\n              length += endSelectedTextLength;\n            } else {\n              length += currentContent.getBlockForKey(currentKey).getLength() + 1;\n            }\n\n            currentKey = currentContent.getKeyAfter(currentKey);\n          }\n\n          ;\n        }\n      }\n\n      return length;\n    };\n\n    this._handleBeforeInput = () => {\n      console.log('hello');\n      const currentContent = this.state.editorState.getCurrentContent();\n      const currentContentLength = currentContent.getPlainText('').length;\n\n      if (currentContentLength > MAX_LENGTH - 1) {\n        console.log('you can type max ten characters');\n        return 'handled';\n      }\n    };\n\n    this._handlePastedText = pastedText => {\n      const currentContent = this.state.editorState.getCurrentContent();\n      const currentContentLength = currentContent.getPlainText('').length;\n\n      const selectedTextLength = this._getLengthOfSelectedText();\n\n      if (currentContentLength + pastedText.length - selectedTextLength > MAX_LENGTH) {\n        console.log('you can type max ten characters');\n        return 'handled';\n      }\n    };\n\n    this.state = {\n      editorState: EditorState.createEmpty()\n    };\n    this.onChange = this.onChange.bind(this);\n    this._getLengthOfSelectedText = this._getLengthOfSelectedText.bind(this);\n    this._handleBeforeInput = this._handleBeforeInput.bind(this);\n\n    this.focus = () => this.refs.editor.focus();\n\n    this.handleKeyCommand = command => this._handleKeyCommand(command);\n\n    this.onTab = e => this._onTab(e);\n\n    this.toggleBlockType = type => this._toggleBlockType(type);\n\n    this.toggleInlineStyle = style => this._toggleInlineStyle(style);\n  }\n\n  _handleKeyCommand(command) {\n    const {\n      editorState\n    } = this.state;\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n  }\n\n  render() {\n    const {\n      editorState\n    } = this.state; // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    if (!this.state.editorState) {\n      return /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RichEditor-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(BlockStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleBlockType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InlineStyleControls, {\n      editorState: editorState,\n      onToggle: this.toggleInlineStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: className,\n      onClick: this.focus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Editor, {\n      blockStyleFn: getBlockStyle,\n      customStyleMap: styleMap,\n      editorState: editorState,\n      handleKeyCommand: this.handleKeyCommand,\n      onChange: this.onChange,\n      onTab: this.onTab,\n      placeholder: \"Tell a story...\",\n      ref: \"editor\",\n      spellCheck: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n} // Custom overrides for \"code\" style.\n\n\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 12,\n    padding: 1\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n\n    this.onToggle = e => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton ui button';\n\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return /*#__PURE__*/React.createElement(\"span\", {\n      className: className,\n      onMouseDown: this.onToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, this.props.label);\n  }\n\n}\n\nconst BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nconst BlockStyleControls = props => {\n  const {\n    editorState\n  } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 5\n    }\n  }, BLOCK_TYPES.map(type => /*#__PURE__*/React.createElement(StyleButton, {\n    key: type.label,\n    active: type.style === blockType,\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nconst InlineStyleControls = props => {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 5\n    }\n  }, INLINE_STYLES.map(type => /*#__PURE__*/React.createElement(StyleButton, {\n    key: type.label,\n    active: currentStyle.has(type.style),\n    label: type.label,\n    onToggle: props.onToggle,\n    style: type.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default RichEditorExample;","map":{"version":3,"sources":["/home/karan/Documents/GitWorkSpace/draftjs_test/react-draft-js-demo/src/draft.js"],"names":["React","Component","debounce","Editor","EditorState","RichUtils","convertFromRaw","convertToRaw","MAX_LENGTH","RichEditorExample","constructor","props","onChange","editorState","contentState","getCurrentContent","console","log","saveContent","setState","content","window","localStorage","setItem","JSON","stringify","_getLengthOfSelectedText","currentSelection","state","getSelection","isCollapsed","length","currentContent","startKey","getStartKey","endKey","getEndKey","isBackward","getIsBackward","blockMap","getBlockMap","startBlock","getBlockForKey","endBlock","isStartAndEndBlockAreTheSame","startBlockTextLength","getLength","endBlockTextLength","startSelectedTextLength","getStartOffset","endSelectedTextLength","getEndOffset","keyAfterEnd","getKeyAfter","currentKey","counter","_handleBeforeInput","currentContentLength","getPlainText","_handlePastedText","pastedText","selectedTextLength","createEmpty","bind","focus","refs","editor","handleKeyCommand","command","_handleKeyCommand","onTab","e","_onTab","toggleBlockType","type","_toggleBlockType","toggleInlineStyle","style","_toggleInlineStyle","newState","maxDepth","blockType","inlineStyle","render","className","hasText","first","getType","getBlockStyle","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","onToggle","preventDefault","active","label","BLOCK_TYPES","BlockStyleControls","selection","map","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport 'draft-js/dist/Draft.css';\r\nimport debounce from 'lodash/debounce';\r\nimport {\r\n  Editor,\r\n  EditorState,\r\n  RichUtils,\r\n  convertFromRaw,\r\n  convertToRaw\r\n} from 'draft-js';\r\n\r\n\r\nconst MAX_LENGTH = 10;\r\n\r\nclass RichEditorExample extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorState: EditorState.createEmpty()\r\n    };\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this._getLengthOfSelectedText = this._getLengthOfSelectedText.bind(this);\r\n    this._handleBeforeInput = this._handleBeforeInput.bind(this);\r\n\r\n    this.focus = () => this.refs.editor.focus();\r\n\r\n    this.handleKeyCommand = (command) => this._handleKeyCommand(command);\r\n    this.onTab = (e) => this._onTab(e);\r\n    this.toggleBlockType = (type) => this._toggleBlockType(type);\r\n    this.toggleInlineStyle = (style) => this._toggleInlineStyle(style);\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    const contentState = editorState.getCurrentContent();\r\n    console.log('content state', convertToRaw(contentState));\r\n    this.saveContent(contentState);\r\n    this.setState({ editorState });\r\n  }\r\n\r\n\r\n\r\n  saveContent = debounce((content) => {\r\n    window.localStorage.setItem('content', JSON.stringify((convertToRaw(content))));\r\n  }, 1000);\r\n\r\n  // saveContent = (content) => {\r\n  //   window.localStorage.setItem('content', JSON.stringify(convertToRaw(content)));\r\n  // }\r\n\r\n\r\n  _getLengthOfSelectedText = () => {\r\n    console.log('say');\r\n    const currentSelection = this.state.editorState.getSelection();\r\n    const isCollapsed = currentSelection.isCollapsed();\r\n\r\n    let length = 0;\r\n\r\n    if (!isCollapsed) {\r\n      const currentContent = this.state.editorState.getCurrentContent();\r\n      const startKey = currentSelection.getStartKey();\r\n      const endKey = currentSelection.getEndKey();\r\n      const isBackward = currentSelection.getIsBackward();\r\n      const blockMap = currentContent.getBlockMap();\r\n      const startBlock = currentContent.getBlockForKey(startKey);\r\n      const endBlock = currentContent.getBlockForKey(endKey);\r\n      const isStartAndEndBlockAreTheSame = startKey === endKey;\r\n      const startBlockTextLength = startBlock.getLength();\r\n      const endBlockTextLength = endBlock.getLength();\r\n      const startSelectedTextLength = startBlockTextLength - currentSelection.getStartOffset();\r\n      const endSelectedTextLength = currentSelection.getEndOffset();\r\n      const keyAfterEnd = currentContent.getKeyAfter(endKey);\r\n\r\n      if (isStartAndEndBlockAreTheSame) {\r\n        length += currentSelection.getEndOffset() - currentSelection.getStartOffset();\r\n      } else {\r\n        let currentKey = startKey;\r\n        let counter = 0;\r\n\r\n        while (currentKey && currentKey !== keyAfterEnd) {\r\n          if (currentKey === startKey) {\r\n            length += startSelectedTextLength + 1;\r\n          } else if (currentKey === endKey) {\r\n            length += endSelectedTextLength;\r\n          } else {\r\n            length += currentContent.getBlockForKey(currentKey).getLength() + 1;\r\n          }\r\n\r\n          currentKey = currentContent.getKeyAfter(currentKey);\r\n        };\r\n      }\r\n    }\r\n\r\n    return length;\r\n  }\r\n\r\n  _handleBeforeInput = () => {\r\n    console.log('hello');\r\n    const currentContent = this.state.editorState.getCurrentContent();\r\n    const currentContentLength = currentContent.getPlainText('').length\r\n\r\n    if (currentContentLength > MAX_LENGTH - 1) {\r\n      console.log('you can type max ten characters');\r\n\r\n      return 'handled';\r\n    }\r\n  }\r\n\r\n  _handlePastedText = (pastedText) => {\r\n    const currentContent = this.state.editorState.getCurrentContent();\r\n    const currentContentLength = currentContent.getPlainText('').length;\r\n    const selectedTextLength = this._getLengthOfSelectedText();\r\n\r\n    if (currentContentLength + pastedText.length - selectedTextLength > MAX_LENGTH) {\r\n      console.log('you can type max ten characters');\r\n\r\n      return 'handled';\r\n    }\r\n  }\r\n\r\n  _handleKeyCommand(command) {\r\n    const { editorState } = this.state;\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  _onTab(e) {\r\n    const maxDepth = 4;\r\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\r\n  }\r\n\r\n  _toggleBlockType(blockType) {\r\n    this.onChange(\r\n      RichUtils.toggleBlockType(\r\n        this.state.editorState,\r\n        blockType\r\n      )\r\n    );\r\n  }\r\n\r\n  _toggleInlineStyle(inlineStyle) {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(\r\n        this.state.editorState,\r\n        inlineStyle\r\n      )\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { editorState } = this.state;\r\n\r\n    // If the user changes block type before entering any text, we can\r\n    // either style the placeholder or hide it. Let's just hide it now.\r\n    let className = 'RichEditor-editor';\r\n    var contentState = editorState.getCurrentContent();\r\n    if (!contentState.hasText()) {\r\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\r\n        className += ' RichEditor-hidePlaceholder';\r\n      }\r\n    }\r\n\r\n\r\n    if (!this.state.editorState) {\r\n      return (\r\n        <h3 className=\"loading\">Loading...</h3>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <div className=\"RichEditor-root\">\r\n          <BlockStyleControls\r\n            editorState={editorState}\r\n            onToggle={this.toggleBlockType}\r\n          />\r\n          <InlineStyleControls\r\n            editorState={editorState}\r\n            onToggle={this.toggleInlineStyle}\r\n          />\r\n          <div className={className} onClick={this.focus}>\r\n            <Editor\r\n              blockStyleFn={getBlockStyle}\r\n              customStyleMap={styleMap}\r\n              editorState={editorState}\r\n              handleKeyCommand={this.handleKeyCommand}\r\n              onChange={this.onChange}\r\n              onTab={this.onTab}\r\n              placeholder=\"Tell a story...\"\r\n              ref=\"editor\"\r\n              spellCheck={true}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n  CODE: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 12,\r\n    padding: 1,\r\n  },\r\n};\r\n\r\nfunction getBlockStyle(block) {\r\n  switch (block.getType()) {\r\n    case 'blockquote': return 'RichEditor-blockquote';\r\n    default: return null;\r\n  }\r\n}\r\n\r\n\r\n\r\nclass StyleButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.onToggle = (e) => {\r\n      e.preventDefault();\r\n      this.props.onToggle(this.props.style);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let className = 'RichEditor-styleButton ui button';\r\n    if (this.props.active) {\r\n      className += ' RichEditor-activeButton';\r\n    }\r\n\r\n    return (\r\n      <span className={className} onMouseDown={this.onToggle}>\r\n        {this.props.label}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst BLOCK_TYPES = [\r\n  { label: 'H1', style: 'header-one' },\r\n  { label: 'H2', style: 'header-two' },\r\n  { label: 'H3', style: 'header-three' },\r\n  { label: 'H4', style: 'header-four' },\r\n  { label: 'H5', style: 'header-five' },\r\n  { label: 'H6', style: 'header-six' },\r\n  { label: 'Blockquote', style: 'blockquote' },\r\n  { label: 'UL', style: 'unordered-list-item' },\r\n  { label: 'OL', style: 'ordered-list-item' },\r\n  { label: 'Code Block', style: 'code-block' },\r\n];\r\n\r\n\r\n\r\nconst BlockStyleControls = (props) => {\r\n  const { editorState } = props;\r\n  const selection = editorState.getSelection();\r\n  const blockType = editorState\r\n    .getCurrentContent()\r\n    .getBlockForKey(selection.getStartKey())\r\n    .getType();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {BLOCK_TYPES.map((type) =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={type.style === blockType}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nvar INLINE_STYLES = [\r\n  { label: 'Bold', style: 'BOLD' },\r\n  { label: 'Italic', style: 'ITALIC' },\r\n  { label: 'Underline', style: 'UNDERLINE' },\r\n  { label: 'Monospace', style: 'CODE' },\r\n];\r\n\r\n\r\n\r\nconst InlineStyleControls = (props) => {\r\n  var currentStyle = props.editorState.getCurrentInlineStyle();\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {INLINE_STYLES.map(type =>\r\n        <StyleButton\r\n          key={type.label}\r\n          active={currentStyle.has(type.style)}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default RichEditorExample;"]},"metadata":{},"sourceType":"module"}